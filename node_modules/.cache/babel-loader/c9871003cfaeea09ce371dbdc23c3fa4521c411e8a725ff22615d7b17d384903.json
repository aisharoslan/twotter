{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport UserProfile from \"../views/UserProfile\";\nimport Admin from \"../views/Admin\";\nconst routes = [\n// routes is just a variable storing an array of router objects\n{\n  path: '/',\n  name: 'HomeView',\n  component: HomeView // this reads from the import above\n}, {\n  path: '/user/:userId',\n  // : says userId is a vairblae\n  name: 'UserProfile',\n  component: UserProfile\n}, {\n  path: '/admin',\n  name: 'Admin',\n  component: Admin,\n  // if there's meta info, check that requiresAdmin is true\n  meta: {\n    requiresAdmin: true\n  }\n}\n// {\n//   path: '/about',\n//   name: 'about',\n//   // route level code-splitting\n//   // this generates a separate chunk (about.[hash].js) for this route\n//   // which is lazy-loaded when the route is visited.\n//   component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n// }\n];\n\nconst router = createRouter({\n  // this is where router is created\n  history: createWebHistory(),\n  routes\n});\n\n// router guard - redirect before/after if user not allowed on certain page\n// to - where u wanna go, from - where you came from, next - where you're redirected to\nrouter.beforeEach(async (to, from, next) => {\n  const isAdmin = true;\n  const requiresAdmin = to.matched.some(record => record.meta.requiresAdmin);\n  if (requiresAdmin && !isAdmin) next({\n    name: 'HomeView'\n  });else next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","UserProfile","Admin","routes","path","name","component","meta","requiresAdmin","router","history","beforeEach","to","from","next","isAdmin","matched","some","record"],"sources":["/Users/aishasabrina/Desktop/Projects/twotter/twotter/twotter/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport UserProfile from \"../views/UserProfile\";\nimport Admin from \"../views/Admin\";\n\nconst routes = [ // routes is just a variable storing an array of router objects\n  {\n    path: '/',\n    name: 'HomeView',\n    component: HomeView // this reads from the import above\n  },\n  {\n    path: '/user/:userId', // : says userId is a vairblae\n    name: 'UserProfile',\n    component: UserProfile\n  },\n  {\n    path: '/admin',\n    name: 'Admin',\n    component: Admin,\n    // if there's meta info, check that requiresAdmin is true\n    meta: {\n      requiresAdmin: true\n    }\n  }\n  // {\n  //   path: '/about',\n  //   name: 'about',\n  //   // route level code-splitting\n  //   // this generates a separate chunk (about.[hash].js) for this route\n  //   // which is lazy-loaded when the route is visited.\n  //   component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n  // }\n]\n\nconst router = createRouter({ // this is where router is created\n  history: createWebHistory(),\n  routes\n})\n\n// router guard - redirect before/after if user not allowed on certain page\n// to - where u wanna go, from - where you came from, next - where you're redirected to\nrouter.beforeEach(async(to,from,next) => {\n  const isAdmin = true;\n  const requiresAdmin = to.matched.some(record => record.meta.requiresAdmin);\n\n  if (requiresAdmin && !isAdmin) next({ name: 'HomeView' });\n  else next();\n})\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,KAAK,MAAM,gBAAgB;AAElC,MAAMC,MAAM,GAAG;AAAE;AACf;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEN,QAAQ,CAAC;AACtB,CAAC,EACD;EACEI,IAAI,EAAE,eAAe;EAAE;EACvBC,IAAI,EAAE,aAAa;EACnBC,SAAS,EAAEL;AACb,CAAC,EACD;EACEG,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ,KAAK;EAChB;EACAK,IAAI,EAAE;IACJC,aAAa,EAAE;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;;AAED,MAAMC,MAAM,GAAGX,YAAY,CAAC;EAAE;EAC5BY,OAAO,EAAEX,gBAAgB,CAAC,CAAC;EAC3BI;AACF,CAAC,CAAC;;AAEF;AACA;AACAM,MAAM,CAACE,UAAU,CAAC,OAAMC,EAAE,EAACC,IAAI,EAACC,IAAI,KAAK;EACvC,MAAMC,OAAO,GAAG,IAAI;EACpB,MAAMP,aAAa,GAAGI,EAAE,CAACI,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACX,IAAI,CAACC,aAAa,CAAC;EAE1E,IAAIA,aAAa,IAAI,CAACO,OAAO,EAAED,IAAI,CAAC;IAAET,IAAI,EAAE;EAAW,CAAC,CAAC,CAAC,KACrDS,IAAI,CAAC,CAAC;AACb,CAAC,CAAC;AAEF,eAAeL,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}