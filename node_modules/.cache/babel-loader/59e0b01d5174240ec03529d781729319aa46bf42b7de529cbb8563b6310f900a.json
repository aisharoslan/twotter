{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"user-profile\"\n};\nconst _hoisted_2 = {\n  class: \"user-profile__user-panel\"\n};\nconst _hoisted_3 = {\n  class: \"user-profile__username\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"user-profile__admin-badge\"\n};\nconst _hoisted_5 = {\n  class: \"user-profile__follower-count\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"strong\", null, \"Followers: \", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"user-profile__create-twoot\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"newTwoot\"\n}, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"New Twoot\")], -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"textarea\", {\n  id: \"newTwoot\",\n  rows: \"4\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_10 = {\n  class: \"user-profile__create-twoot-type\"\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"newTwootType\"\n}, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"Type: \")], -1 /* HOISTED */);\nconst _hoisted_12 = {\n  id: \"newTwootType\"\n};\nconst _hoisted_13 = [\"value\"];\nconst _hoisted_14 = {\n  class: \"user-profile__twoots-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TwootItem = _resolveComponent(\"TwootItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", _hoisted_3, \"@\" + _toDisplayString($data.user.username), 1 /* TEXT */), _createCommentVNode(\" TEMPLATE CONDITIONALS \"), $data.user.isAdmin ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" Admin \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <div class=\\\"user-profile__admin-badge\\\" v-else> // no need attribute\\n            Not Admin\\n        </div>\\n        // can also do v-else-if=\\\"condition\\\"\\n        \"), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createTextVNode(\" \" + _toDisplayString($data.followers), 1 /* TEXT */)]), _createCommentVNode(\" will not refresh when submit form/twoot \"), _createElementVNode(\"form\", _hoisted_7, [_createCommentVNode(\" give input fields label! \"), _hoisted_8, _hoisted_9, _createCommentVNode(\" create 2 types: a draft and a real instant tweet \"), _createElementVNode(\"div\", _hoisted_10, [_hoisted_11, _createElementVNode(\"select\", _hoisted_12, [_createCommentVNode(\" selecting from a few options \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.twootTypes, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: option.value,\n      key: index\n    }, [_createCommentVNode(\" each object has a value field (dynamic) \"), _createTextVNode(\" \" + _toDisplayString(option.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" referencing code or piece of text, not a literals \")])])])]), _createElementVNode(\"div\", _hoisted_14, [_createCommentVNode(\" {{ user.twoots[0] }}\\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 \"), _createCommentVNode(\" it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render \"), _createCommentVNode(\" so we want to create a twoot component for better org \"), _createCommentVNode(\" <div class=\\\"user-profile__twoot\\\" v-for=\\\"twoot in user.twoots\\\" :key=\\\"twoot.id\\\">\\n            {{ twoot.content }}\\n          </div> \"), _createCommentVNode(\" if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.user.twoots, twoot => {\n    return _openBlock(), _createBlock(_component_TwootItem, {\n      key: twoot.id,\n      username: $data.user.username,\n      twoot: twoot,\n      onFavourite: $options.toggleFavourite\n    }, null, 8 /* PROPS */, [\"username\", \"twoot\", \"onFavourite\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" favourite is an event we emit to the parent \"), _createCommentVNode(\" passing in props and actual twoot object pulled from the for loop \")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","id","rows","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","$data","user","username","_createCommentVNode","isAdmin","_hoisted_4","_hoisted_5","_hoisted_6","followers","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_Fragment","_renderList","twootTypes","option","index","value","key","name","_hoisted_14","twoots","twoot","_createBlock","_component_TwootItem","onFavourite","$options","toggleFavourite"],"sources":["/Users/aishasabrina/Desktop/Projects/twotter/twotter/twotter/src/components/UserProfile.vue"],"sourcesContent":["<!-- <template>\n  <div id=\"app\">\n    @{{ user.username }} - {{ fullName }} // Don't need to call data(), readily accessible, the {{}} is to show that it's dynamic\n    <strong>Followers: </strong> {{ followers }}\n    <button @click=\"followUser\">\n      Followers\n    </button>\n  </div>\n</template>\n-->\n<template>\n    <div class=\"user-profile\">\n      <div class=\"user-profile__user-panel\">\n        <h1 class=\"user-profile__username\">@{{ user.username }}</h1>\n        <!-- TEMPLATE CONDITIONALS -->\n        <div class=\"user-profile__admin-badge\" v-if=\"user.isAdmin\">\n            Admin\n        </div>\n        <!-- <div class=\"user-profile__admin-badge\" v-else> // no need attribute\n            Not Admin\n        </div>\n        // can also do v-else-if=\"condition\"\n        -->\n        <div class=\"user-profile__follower-count\">\n          <strong>Followers: </strong> {{ followers }}\n        </div>\n        <!-- will not refresh when submit form/twoot -->\n        <form class=\"user-profile__create-twoot\">\n          <!-- give input fields label! -->\n          <label for=\"newTwoot\"><strong>New Twoot</strong></label>\n          <textarea id=\"newTwoot\" rows=\"4\" />\n          <!-- create 2 types: a draft and a real instant tweet -->\n          <div class=\"user-profile__create-twoot-type\">\n            <label for=\"newTwootType\"><strong>Type: </strong></label>\n            <select id=\"newTwootType\"> <!-- selecting from a few options -->\n              <option :value=\"option.value\" v-for=\"(option, index) in twootTypes\" :key=\"index\"> <!-- each object has a value field (dynamic) -->\n                {{ option.name }}\n              </option>\n              <!-- referencing code or piece of text, not a literals -->\n            </select>\n          </div>\n        </form>\n      </div>\n      <div class=\"user-profile__twoots-wrapper\">\n          <!-- {{ user.twoots[0] }}\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 --> \n          <!-- it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render -->\n          <!-- so we want to create a twoot component for better org -->\n          <!-- <div class=\"user-profile__twoot\" v-for=\"twoot in user.twoots\" :key=\"twoot.id\">\n            {{ twoot.content }}\n          </div> -->\n          <!-- if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click -->\n          <TwootItem \n            v-for=\"twoot in user.twoots\" \n            :key=\"twoot.id\" \n            :username=\"user.username\" \n            :twoot=\"twoot\" \n            @favourite=\"toggleFavourite\"\n          />\n          <!-- favourite is an event we emit to the parent -->\n          <!-- passing in props and actual twoot object pulled from the for loop -->\n        </div>\n    </div>\n</template>\n  \n<script>\nimport TwootItem from \"./TwootItem\";\n\n  export default {\n    // order doesn't matter in here\n    // name: 'App', // this is like key value pairs/\n    name: \"UserProfile\",\n    components: { TwootItem },\n    data() {\n      return {\n        twootTypes: [ // an array of 2 objects\n          { value: 'draft', name: 'Draft' },\n          { value: 'instant', name: 'Instant Twoot' }\n        ],\n        // isLoading: false, // interacting w this to know if loading/not\n        // all this info below is usually given by API\n        followers: 0, // default state\n        user: { // user object\n          id: 1,\n          username: 'Shasbrna_19',\n          firstName: 'Aisha',\n          lastName: 'Sabrina',\n          email: 'aisharoslan@nyu.edu',\n          isAdmin: true,\n          twoots: [\n            { id: 1, content: 'Twotter is Amazing!' },\n            { id: 2, content: \"Don't forget to subscribe!\" }\n          ]\n        }\n      }\n    },\n    watch: {\n      // watches a data point - if it changes, runs a function, esp when u have data that changes REACTIVELY based off of other things\n      followers(newFollowerCount, oldFollowerCount) {\n        if (oldFollowerCount < newFollowerCount) { // only if gain follower\n          console.log(`${this.user.username} has gained a follower!`)\n          // same user component but putting diff data into it\n        }\n        // if username or id is diff - then we wanna fetch new user data\n      }\n    },\n    // computed property - 1 data point generated/built reactively from other factors \n    computed: {\n      fullName() {\n        return `${this.user.firstName} ${this.user.lastName}` // calls the user object in data() - this is a string literal\n        // another option: this.user.firstName + this.user.lastName\n      }\n    },\n    methods: { // doesn't run by itself, need to call\n      followUser() {\n        this.followers++; // adds followers count by 1\n      },\n      toggleFavourite(id) {\n        console.log(`Favourited Tweet #${id}`)\n      }\n    },\n    // LIFECYCLE HOOK - function built into vue interface that runs during diff stages of component's life cycle (e.g. created/mounted/destroyed)\n    // basically mounted just runs when the first component is rendered\n    mounted() {// runs whatever component is loaded for the first time\n      this.followUser(); // basically calls the followUser() method IMMEDIATELY\n      // so in a split second, it will add the 1 to the default 0 \n      // can also do cool stuff like getting user object from API, make API call\n    }\n  };\n</script>\n  \n<style>\n  .user-profile {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    width: 100%;\n    padding: 50px 5%;\n  }\n\n  .user-profile__user-panel {\n    display: flex;\n    flex-direction: column;\n    margin-right: 50px;\n    padding: 20px;\n    background-color: white;\n    border-radius: 5px;\n    border: 1px solid #DFE3E8;\n  }\n  \n  .user-profile__admin-badge {\n    background: rebeccapurple;\n    color: white;\n    border-radius: 5px;\n    margin-right: auto;\n    padding: 0 10px;\n    font-weight: bold;\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .user-profile__twoots-wrapper {\n    display: grid;\n    grid-gap: 10px;\n  }\n  \n  .user-profile__create-twoot {\n    padding-top: 20px;\n    display: flex;\n    flex-direction: column;\n  }\n</style>\n  "],"mappings":";;EAWSA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAA0B;;EAC/BA,KAAK,EAAC;AAAwB;;;EAE7BA,KAAK,EAAC;;;EAQNA,KAAK,EAAC;AAA8B;gCACvCC,mBAAA,CAA4B,gBAApB,aAAW;;EAGfD,KAAK,EAAC;AAA4B;gCAEtCC,mBAAA,CAAwD;EAAjDC,GAAG,EAAC;AAAU,I,aAACD,mBAAA,CAA0B,gBAAlB,WAAS,E;gCACvCA,mBAAA,CAAmC;EAAzBE,EAAE,EAAC,UAAU;EAACC,IAAI,EAAC;;;EAExBJ,KAAK,EAAC;AAAiC;iCAC1CC,mBAAA,CAAyD;EAAlDC,GAAG,EAAC;AAAc,I,aAACD,mBAAA,CAAuB,gBAAf,QAAM,E;;EAChCE,EAAE,EAAC;AAAc;;;EAS1BH,KAAK,EAAC;AAA8B;;;uBAhC3CK,mBAAA,CAmDM,OAnDNC,UAmDM,GAlDJL,mBAAA,CA8BM,OA9BNM,UA8BM,GA7BJN,mBAAA,CAA4D,MAA5DO,UAA4D,EAAzB,GAAC,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,IAAI,CAACC,QAAQ,kBACpDC,mBAAA,2BAA8B,EACeH,KAAA,CAAAC,IAAI,CAACG,OAAO,I,cAAzDT,mBAAA,CAEM,OAFNU,UAEM,EAFqD,SAE3D,K,mCACAF,mBAAA,2KAIG,EACHZ,mBAAA,CAEM,OAFNe,UAEM,GADJC,UAA4B,E,iBAAA,GAAC,GAAAR,gBAAA,CAAGC,KAAA,CAAAQ,SAAS,iB,GAE3CL,mBAAA,6CAAgD,EAChDZ,mBAAA,CAcO,QAdPkB,UAcO,GAbLN,mBAAA,8BAAiC,EACjCO,UAAwD,EACxDC,UAAmC,EACnCR,mBAAA,sDAAyD,EACzDZ,mBAAA,CAQM,OARNqB,WAQM,GAPJC,WAAyD,EACzDtB,mBAAA,CAKS,UALTuB,WAKS,GALkBX,mBAAA,kCAAqC,G,kBAC9DR,mBAAA,CAESoB,SAAA,QAAAC,WAAA,CAF+ChB,KAAA,CAAAiB,UAAU,GAA5BC,MAAM,EAAEC,KAAK;yBAAnDxB,mBAAA,CAES;MAFAyB,KAAK,EAAEF,MAAM,CAACE,KAAK;MAAyCC,GAAG,EAAEF;QAAQhB,mBAAA,6CAAgD,E,iBAAA,GAChI,GAAAJ,gBAAA,CAAGmB,MAAM,CAACI,IAAI,iB;kCAEhBnB,mBAAA,uDAA0D,C,SAKlEZ,mBAAA,CAkBQ,OAlBRgC,WAkBQ,GAjBJpB,mBAAA,6GAC2E,EAC3EA,mBAAA,kPAAqP,EACrPA,mBAAA,2DAA8D,EAC9DA,mBAAA,6IAEU,EACVA,mBAAA,iHAAoH,G,kBACpHR,mBAAA,CAMEoB,SAAA,QAAAC,WAAA,CALgBhB,KAAA,CAAAC,IAAI,CAACuB,MAAM,EAApBC,KAAK;yBADdC,YAAA,CAMEC,oBAAA;MAJCN,GAAG,EAAEI,KAAK,CAAChC,EAAE;MACbS,QAAQ,EAAEF,KAAA,CAAAC,IAAI,CAACC,QAAQ;MACvBuB,KAAK,EAAEA,KAAK;MACZG,WAAS,EAAEC,QAAA,CAAAC;;kCAEd3B,mBAAA,iDAAoD,EACpDA,mBAAA,uEAA0E,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}