{"ast":null,"code":"import TwootItem from \"./TwootItem\";\nexport default {\n  // order doesn't matter in here\n  // name: 'App', // this is like key value pairs/\n  name: \"UserProfile\",\n  components: {\n    TwootItem\n  },\n  data() {\n    return {\n      newTwootContent: '',\n      selectedTwootType: 'instant',\n      // default type\n      twootTypes: [\n      // an array of 2 objects\n      {\n        value: 'draft',\n        name: 'Draft'\n      }, {\n        value: 'instant',\n        name: 'Instant Twoot'\n      }],\n      // isLoading: false, // interacting w this to know if loading/not\n      // all this info below is usually given by API\n      followers: 0,\n      // default state\n      user: {\n        // user object\n        id: 1,\n        username: 'Shasbrna_19',\n        firstName: 'Aisha',\n        lastName: 'Sabrina',\n        email: 'aisharoslan@nyu.edu',\n        isAdmin: true,\n        twoots: [{\n          id: 1,\n          content: 'Twotter is Amazing!'\n        }, {\n          id: 2,\n          content: \"Don't forget to subscribe!\"\n        }]\n      }\n    };\n  },\n  watch: {\n    // watches a data point - if it changes, runs a function, esp when u have data that changes REACTIVELY based off of other things\n    followers(newFollowerCount, oldFollowerCount) {\n      if (oldFollowerCount < newFollowerCount) {\n        // only if gain follower\n        console.log(`${this.user.username} has gained a follower!`);\n        // same user component but putting diff data into it\n      }\n      // if username or id is diff - then we wanna fetch new user data\n    }\n  },\n\n  // computed property - 1 data point generated/built reactively from other factors \n  computed: {\n    fullName() {\n      return `${this.user.firstName} ${this.user.lastName}`; // calls the user object in data() - this is a string literal\n      // another option: this.user.firstName + this.user.lastName\n    }\n  },\n\n  methods: {\n    // doesn't run by itself, need to call\n    followUser() {\n      this.followers++; // adds followers count by 1\n    },\n\n    toggleFavourite(id) {\n      console.log(`Favourited Tweet #${id}`);\n    }\n  },\n  // LIFECYCLE HOOK - function built into vue interface that runs during diff stages of component's life cycle (e.g. created/mounted/destroyed)\n  // basically mounted just runs when the first component is rendered\n  mounted() {\n    // runs whatever component is loaded for the first time\n    this.followUser(); // basically calls the followUser() method IMMEDIATELY\n    // so in a split second, it will add the 1 to the default 0 \n    // can also do cool stuff like getting user object from API, make API call\n  }\n};","map":{"version":3,"names":["TwootItem","name","components","data","newTwootContent","selectedTwootType","twootTypes","value","followers","user","id","username","firstName","lastName","email","isAdmin","twoots","content","watch","newFollowerCount","oldFollowerCount","console","log","computed","fullName","methods","followUser","toggleFavourite","mounted"],"sources":["/Users/aishasabrina/Desktop/Projects/twotter/twotter/twotter/src/components/UserProfile.vue"],"sourcesContent":["<!-- <template>\n  <div id=\"app\">\n    @{{ user.username }} - {{ fullName }} // Don't need to call data(), readily accessible, the {{}} is to show that it's dynamic\n    <strong>Followers: </strong> {{ followers }}\n    <button @click=\"followUser\">\n      Followers\n    </button>\n  </div>\n</template>\n-->\n<template>\n    <div class=\"user-profile\">\n      <div class=\"user-profile__user-panel\">\n        <h1 class=\"user-profile__username\">@{{ user.username }}</h1>\n        <!-- TEMPLATE CONDITIONALS -->\n        <div class=\"user-profile__admin-badge\" v-if=\"user.isAdmin\">\n            Admin\n        </div>\n        <!-- <div class=\"user-profile__admin-badge\" v-else> // no need attribute\n            Not Admin\n        </div>\n        // can also do v-else-if=\"condition\"\n        -->\n        <div class=\"user-profile__follower-count\">\n          <strong>Followers: </strong> {{ followers }}\n        </div>\n        <!-- will not refresh when submit form/twoot -->\n        <form class=\"user-profile__create-twoot\">\n          <!-- give input fields label! -->\n          <label for=\"newTwoot\"><strong>New Twoot</strong></label>\n          <textarea id=\"newTwoot\" rows=\"4\" v-model=\"newTwootContent\"/>\n          <!-- v-model is to sync up the input and tag, so value of field is equal to this v-model textarea \"tag\"-->\n          <!-- create 2 types: a draft and a real instant tweet -->\n          <div class=\"user-profile__create-twoot-type\">\n            <label for=\"newTwootType\"><strong>Type: </strong></label>\n            <select id=\"newTwootType\"> <!-- selecting from a few options -->\n              <option :value=\"option.value\" v-for=\"(option, index) in twootTypes\" :key=\"index\"> <!-- each object has a value field (dynamic) -->\n                {{ option.name }}\n              </option>\n              <!-- referencing code or piece of text, not a literals -->\n            </select>\n          </div>\n        </form>\n      </div>\n      <div class=\"user-profile__twoots-wrapper\">\n          <!-- {{ user.twoots[0] }}\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 --> \n          <!-- it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render -->\n          <!-- so we want to create a twoot component for better org -->\n          <!-- <div class=\"user-profile__twoot\" v-for=\"twoot in user.twoots\" :key=\"twoot.id\">\n            {{ twoot.content }}\n          </div> -->\n          <!-- if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click -->\n          <TwootItem \n            v-for=\"twoot in user.twoots\" \n            :key=\"twoot.id\" \n            :username=\"user.username\" \n            :twoot=\"twoot\" \n            @favourite=\"toggleFavourite\"\n          />\n          <!-- favourite is an event we emit to the parent -->\n          <!-- passing in props and actual twoot object pulled from the for loop -->\n        </div>\n    </div>\n</template>\n  \n<script>\nimport TwootItem from \"./TwootItem\";\n\n  export default {\n    // order doesn't matter in here\n    // name: 'App', // this is like key value pairs/\n    name: \"UserProfile\",\n    components: { TwootItem },\n    data() {\n      return {\n        newTwootContent: '',\n        selectedTwootType: 'instant', // default type\n        twootTypes: [ // an array of 2 objects\n          { value: 'draft', name: 'Draft' },\n          { value: 'instant', name: 'Instant Twoot' }\n        ],\n        // isLoading: false, // interacting w this to know if loading/not\n        // all this info below is usually given by API\n        followers: 0, // default state\n        user: { // user object\n          id: 1,\n          username: 'Shasbrna_19',\n          firstName: 'Aisha',\n          lastName: 'Sabrina',\n          email: 'aisharoslan@nyu.edu',\n          isAdmin: true,\n          twoots: [\n            { id: 1, content: 'Twotter is Amazing!' },\n            { id: 2, content: \"Don't forget to subscribe!\" }\n          ]\n        }\n      }\n    },\n    watch: {\n      // watches a data point - if it changes, runs a function, esp when u have data that changes REACTIVELY based off of other things\n      followers(newFollowerCount, oldFollowerCount) {\n        if (oldFollowerCount < newFollowerCount) { // only if gain follower\n          console.log(`${this.user.username} has gained a follower!`)\n          // same user component but putting diff data into it\n        }\n        // if username or id is diff - then we wanna fetch new user data\n      }\n    },\n    // computed property - 1 data point generated/built reactively from other factors \n    computed: {\n      fullName() {\n        return `${this.user.firstName} ${this.user.lastName}` // calls the user object in data() - this is a string literal\n        // another option: this.user.firstName + this.user.lastName\n      }\n    },\n    methods: { // doesn't run by itself, need to call\n      followUser() {\n        this.followers++; // adds followers count by 1\n      },\n      toggleFavourite(id) {\n        console.log(`Favourited Tweet #${id}`)\n      }\n    },\n    // LIFECYCLE HOOK - function built into vue interface that runs during diff stages of component's life cycle (e.g. created/mounted/destroyed)\n    // basically mounted just runs when the first component is rendered\n    mounted() {// runs whatever component is loaded for the first time\n      this.followUser(); // basically calls the followUser() method IMMEDIATELY\n      // so in a split second, it will add the 1 to the default 0 \n      // can also do cool stuff like getting user object from API, make API call\n    }\n  };\n</script>\n  \n<style>\n  .user-profile {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    width: 100%;\n    padding: 50px 5%;\n  }\n\n  .user-profile__user-panel {\n    display: flex;\n    flex-direction: column;\n    margin-right: 50px;\n    padding: 20px;\n    background-color: white;\n    border-radius: 5px;\n    border: 1px solid #DFE3E8;\n  }\n  \n  .user-profile__admin-badge {\n    background: rebeccapurple;\n    color: white;\n    border-radius: 5px;\n    margin-right: auto;\n    padding: 0 10px;\n    font-weight: bold;\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .user-profile__twoots-wrapper {\n    display: grid;\n    grid-gap: 10px;\n  }\n  \n  .user-profile__create-twoot {\n    padding-top: 20px;\n    display: flex;\n    flex-direction: column;\n  }\n</style>\n  "],"mappings":"AAmEA,OAAOA,SAAQ,MAAO,aAAa;AAEjC,eAAe;EACb;EACA;EACAC,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IAAEF;EAAU,CAAC;EACzBG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,eAAe,EAAE,EAAE;MACnBC,iBAAiB,EAAE,SAAS;MAAE;MAC9BC,UAAU,EAAE;MAAE;MACZ;QAAEC,KAAK,EAAE,OAAO;QAAEN,IAAI,EAAE;MAAQ,CAAC,EACjC;QAAEM,KAAK,EAAE,SAAS;QAAEN,IAAI,EAAE;MAAgB,EAC3C;MACD;MACA;MACAO,SAAS,EAAE,CAAC;MAAE;MACdC,IAAI,EAAE;QAAE;QACNC,EAAE,EAAE,CAAC;QACLC,QAAQ,EAAE,aAAa;QACvBC,SAAS,EAAE,OAAO;QAClBC,QAAQ,EAAE,SAAS;QACnBC,KAAK,EAAE,qBAAqB;QAC5BC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,CACN;UAAEN,EAAE,EAAE,CAAC;UAAEO,OAAO,EAAE;QAAsB,CAAC,EACzC;UAAEP,EAAE,EAAE,CAAC;UAAEO,OAAO,EAAE;QAA6B;MAEnD;IACF;EACF,CAAC;EACDC,KAAK,EAAE;IACL;IACAV,SAASA,CAACW,gBAAgB,EAAEC,gBAAgB,EAAE;MAC5C,IAAIA,gBAAe,GAAID,gBAAgB,EAAE;QAAE;QACzCE,OAAO,CAACC,GAAG,CAAE,GAAE,IAAI,CAACb,IAAI,CAACE,QAAQ,yBAAyB;QAC1D;MACF;MACA;IACF;EACF,CAAC;;EACD;EACAY,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAQ,GAAE,IAAI,CAACf,IAAI,CAACG,SAAS,IAAI,IAAI,CAACH,IAAI,CAACI,QAAS,IAAE;MACtD;IACF;EACF,CAAC;;EACDY,OAAO,EAAE;IAAE;IACTC,UAAUA,CAAA,EAAG;MACX,IAAI,CAAClB,SAAS,EAAE,EAAE;IACpB,CAAC;;IACDmB,eAAeA,CAACjB,EAAE,EAAE;MAClBW,OAAO,CAACC,GAAG,CAAE,qBAAoBZ,EAAG,EAAC;IACvC;EACF,CAAC;EACD;EACA;EACAkB,OAAOA,CAAA,EAAG;IAAC;IACT,IAAI,CAACF,UAAU,CAAC,CAAC,EAAE;IACnB;IACA;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}