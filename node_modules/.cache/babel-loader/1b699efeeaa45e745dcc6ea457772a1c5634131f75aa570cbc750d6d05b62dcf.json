{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, vModelSelect as _vModelSelect, withModifiers as _withModifiers, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6ef6ca5e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"user-profile\"\n};\nconst _hoisted_2 = {\n  class: \"user-profile__user-panel\"\n};\nconst _hoisted_3 = {\n  class: \"user-profile__username\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"user-profile__admin-badge\"\n};\nconst _hoisted_5 = {\n  class: \"user-profile__follower-count\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"Followers: \", -1 /* HOISTED */));\nconst _hoisted_7 = {\n  for: \"newTwoot\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"New Twoot\", -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"user-profile__create-twoot-type\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"newTwootType\"\n}, [/*#__PURE__*/_createElementVNode(\"strong\", null, \"Type: \")], -1 /* HOISTED */));\nconst _hoisted_11 = [\"value\"];\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"button\", null, [/*#__PURE__*/_createTextVNode(\" Twoot! \"), /*#__PURE__*/_createCommentVNode(\" in html, it'd refresh when u submit - we don't want that, so use event @submit.prevent instead of refreshing\")], -1 /* HOISTED */));\nconst _hoisted_13 = {\n  class: \"user-profile__twoots-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TwootItem = _resolveComponent(\"TwootItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", _hoisted_3, \"@\" + _toDisplayString($data.user.username), 1 /* TEXT */), _createCommentVNode(\" TEMPLATE CONDITIONALS \"), $data.user.isAdmin ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, \" Admin \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <div class=\\\"user-profile__admin-badge\\\" v-else> // no need attribute\\n            Not Admin\\n        </div>\\n        // can also do v-else-if=\\\"condition\\\"\\n        \"), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createTextVNode(\" \" + _toDisplayString($data.followers), 1 /* TEXT */)]), _createCommentVNode(\" will not refresh when submit form/twoot \"), _createElementVNode(\"form\", {\n    class: \"user-profile__create-twoot\",\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.createNewTwoot && $options.createNewTwoot(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" submit event - create new twoot \"), _createCommentVNode(\" give input fields label! \"), _createElementVNode(\"label\", _hoisted_7, [_hoisted_8, _createTextVNode(\" ( \" + _toDisplayString($options.newTwootCharacterCount / 180) + \")\", 1 /* TEXT */)]), _createCommentVNode(\" to display how many char out of 180 \"), _withDirectives(_createElementVNode(\"textarea\", {\n    id: \"newTwoot\",\n    rows: \"4\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newTwootContent = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newTwootContent]]), _createCommentVNode(\" v-model is to sync up the input and tag, so value of field is synced up to this v-model textarea \\\"tag\\\"\"), _createCommentVNode(\" create 2 types: a draft and a real instant tweet \"), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _withDirectives(_createElementVNode(\"select\", {\n    id: \"newTwootType\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedTwootType = $event)\n  }, [_createCommentVNode(\" selecting from a few options \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.twootTypes, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: option.value,\n      key: index\n    }, [_createCommentVNode(\" each object has a value field (dynamic), sets value as selectedTwootType when u choose type \"), _createTextVNode(\" \" + _toDisplayString(option.name), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_11);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" referencing code or piece of text, not a literals \")], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedTwootType]])]), _hoisted_12], 32 /* HYDRATE_EVENTS */)]), _createElementVNode(\"div\", _hoisted_13, [_createCommentVNode(\" {{ user.twoots[0] }}\\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 \"), _createCommentVNode(\" it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render \"), _createCommentVNode(\" so we want to create a twoot component for better org \"), _createCommentVNode(\" <div class=\\\"user-profile__twoot\\\" v-for=\\\"twoot in user.twoots\\\" :key=\\\"twoot.id\\\">\\n            {{ twoot.content }}\\n          </div> \"), _createCommentVNode(\" if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.user.twoots, twoot => {\n    return _openBlock(), _createBlock(_component_TwootItem, {\n      key: twoot.id,\n      username: $data.user.username,\n      twoot: twoot,\n      onFavourite: $options.toggleFavourite\n    }, null, 8 /* PROPS */, [\"username\", \"twoot\", \"onFavourite\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" favourite is an event we emit to the parent \"), _createCommentVNode(\" passing in props and actual twoot object pulled from the for loop \")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","_createCommentVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_toDisplayString","$data","user","username","isAdmin","_hoisted_4","_hoisted_5","_hoisted_6","followers","onSubmit","_cache","_withModifiers","args","$options","createNewTwoot","_hoisted_7","_hoisted_8","newTwootCharacterCount","id","rows","newTwootContent","$event","_hoisted_9","_hoisted_10","selectedTwootType","_Fragment","_renderList","twootTypes","option","index","value","key","name","_hoisted_12","_hoisted_13","twoots","twoot","_createBlock","_component_TwootItem","onFavourite","toggleFavourite"],"sources":["/Users/aishasabrina/Desktop/Projects/twotter/twotter/twotter/src/components/UserProfile.vue"],"sourcesContent":["<!-- <template>\n  <div id=\"app\">\n    @{{ user.username }} - {{ fullName }} // Don't need to call data(), readily accessible, the {{}} is to show that it's dynamic\n    <strong>Followers: </strong> {{ followers }}\n    <button @click=\"followUser\">\n      Followers\n    </button>\n  </div>\n</template>\n-->\n<template>\n    <div class=\"user-profile\">\n      <div class=\"user-profile__user-panel\">\n        <h1 class=\"user-profile__username\">@{{ user.username }}</h1>\n        <!-- TEMPLATE CONDITIONALS -->\n        <div class=\"user-profile__admin-badge\" v-if=\"user.isAdmin\">\n            Admin\n        </div>\n        <!-- <div class=\"user-profile__admin-badge\" v-else> // no need attribute\n            Not Admin\n        </div>\n        // can also do v-else-if=\"condition\"\n        -->\n        <div class=\"user-profile__follower-count\">\n          <strong>Followers: </strong> {{ followers }}\n        </div>\n        <!-- will not refresh when submit form/twoot -->\n        <form class=\"user-profile__create-twoot\" @submit.prevent=\"createNewTwoot\"> <!-- submit event - create new twoot -->\n          <!-- give input fields label! -->\n          <label for=\"newTwoot\"><strong>New Twoot</strong> ( {{ newTwootCharacterCount/180 }})</label> <!-- to display how many char out of 180 -->\n          <textarea id=\"newTwoot\" rows=\"4\" v-model=\"newTwootContent\"/>\n          <!-- v-model is to sync up the input and tag, so value of field is synced up to this v-model textarea \"tag\"-->\n          <!-- create 2 types: a draft and a real instant tweet -->\n          <div class=\"user-profile__create-twoot-type\">\n            <label for=\"newTwootType\"><strong>Type: </strong></label>\n            <select id=\"newTwootType\" v-model=\"selectedTwootType\"> <!-- selecting from a few options -->\n              <option :value=\"option.value\" v-for=\"(option, index) in twootTypes\" :key=\"index\"> <!-- each object has a value field (dynamic), sets value as selectedTwootType when u choose type -->\n                {{ option.name }}\n              </option>\n              <!-- referencing code or piece of text, not a literals -->\n            </select>\n          </div>\n          \n          <button>\n            Twoot! <!-- in html, it'd refresh when u submit - we don't want that, so use event @submit.prevent instead of refreshing-->\n          </button>\n        </form>\n      </div>\n      <div class=\"user-profile__twoots-wrapper\">\n          <!-- {{ user.twoots[0] }}\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 --> \n          <!-- it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render -->\n          <!-- so we want to create a twoot component for better org -->\n          <!-- <div class=\"user-profile__twoot\" v-for=\"twoot in user.twoots\" :key=\"twoot.id\">\n            {{ twoot.content }}\n          </div> -->\n          <!-- if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click -->\n          <TwootItem \n            v-for=\"twoot in user.twoots\" \n            :key=\"twoot.id\" \n            :username=\"user.username\" \n            :twoot=\"twoot\" \n            @favourite=\"toggleFavourite\"\n          />\n          <!-- favourite is an event we emit to the parent -->\n          <!-- passing in props and actual twoot object pulled from the for loop -->\n        </div>\n    </div>\n</template>\n  \n<script>\nimport TwootItem from \"./TwootItem\";\n\n  export default {\n    // order doesn't matter in here\n    // name: 'App', // this is like key value pairs/\n    name: \"UserProfile\",\n    components: { TwootItem },\n    data() {\n      return {\n        newTwootContent: '',\n        selectedTwootType: 'instant', // default type\n        twootTypes: [ // an array of 2 objects\n          { value: 'draft', name: 'Draft' },\n          { value: 'instant', name: 'Instant Twoot' }\n        ],\n        // isLoading: false, // interacting w this to know if loading/not\n        // all this info below is usually given by API\n        followers: 0, // default state\n        user: { // user object\n          id: 1,\n          username: 'Shasbrna_19',\n          firstName: 'Aisha',\n          lastName: 'Sabrina',\n          email: 'aisharoslan@nyu.edu',\n          isAdmin: true,\n          twoots: [\n            { id: 1, content: 'Twotter is Amazing!' },\n            { id: 2, content: \"Don't forget to subscribe!\" }\n          ]\n        }\n      }\n    },\n    watch: {\n      // watches a data point - if it changes, runs a function, esp when u have data that changes REACTIVELY based off of other things\n      followers(newFollowerCount, oldFollowerCount) {\n        if (oldFollowerCount < newFollowerCount) { // only if gain follower\n          console.log(`${this.user.username} has gained a follower!`)\n          // same user component but putting diff data into it\n        }\n        // if username or id is diff - then we wanna fetch new user data\n      }\n    },\n    // computed property - 1 data point generated/built reactively from other factors \n    computed: { \n      fullName() {\n        return `${this.user.firstName} ${this.user.lastName}` // calls the user object in data() - this is a string literal\n        // another option: this.user.firstName + this.user.lastName\n      },\n      // dyanmically update when char count is changed // DYNAMIC STYLING for css - changes style based on whether data is diff or not\n      newTwootCharacterCount() {\n        return this.newTwootContent.length; // how many characters in that string or if a list, how many things/objects in that list\n      }\n\n    },\n    methods: { // doesn't run by itself, need to call\n      followUser() {\n        this.followers++; // adds followers count by 1\n      },\n      toggleFavourite(id) {\n        console.log(`Favourited Tweet #${id}`)\n      },\n      createNewTwoot() {\n        if (this.newTwootContent && this.selectedTwootType !== 'draft') { \n        // check if content is not '' and twoot type is not draft, !== for js, then create new user and add to the FRONT - unshift() in js\n          this.user.twoots.unshift( {\n          id: this.user.twoots.length + 1,\n          content: this.newTwootContent\n          })\n        }\n        this.newTwootContent = ''; // to empty the box after twooting\n      }\n    },\n    // LIFECYCLE HOOK - function built into vue interface that runs during diff stages of component's life cycle (e.g. created/mounted/destroyed)\n    // basically mounted just runs when the first component is rendered\n    mounted() {// runs whatever component is loaded for the first time\n      this.followUser(); // basically calls the followUser() method IMMEDIATELY\n      // so in a split second, it will add the 1 to the default 0 \n      // can also do cool stuff like getting user object from API, make API call\n    }\n  };\n</script>\n  \n<!-- scoped keyword makes sure that every class in <style> only pertains to this component, NOT for the root App components, use scss with a library/webpack to compile this scss into normal css, why is scss better? for NESTED classes - good for hierarchy and more specific, e.g. h1 for everyone got, but u want a specific one for a component, install webpack using vue ui, lang=\"scss\" alrdy imports it, so now it puts parent class in style declaration when inspect-->\n<style lang=\"scss\" scoped>\n  // so now, we nest all in this user-profile\n  .user-profile {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    width: 100%;\n    padding: 50px 5%;\n\n    // child of user-profile\n    .user-profile__user-panel {\n      display: flex;\n      flex-direction: column;\n      margin-right: 50px;\n      padding: 20px;\n      background-color: white;\n      border-radius: 5px;\n      border: 1px solid #DFE3E8;\n\n      h1 {\n      margin: 0;\n      }\n  \n      // child of user-panel\n      .user-profile__admin-badge {\n        background: rebeccapurple;\n        color: white;\n        border-radius: 5px;\n        margin-right: auto;\n        padding: 0 10px;\n        font-weight: bold;\n      }\n\n      .user-profile__create-twoot {\n        padding-top: 20px;\n        display: flex;\n        flex-direction: column;\n      }\n     }\n      .user-profile__twoots-wrapper {\n      display: grid;\n      grid-gap: 10px;\n      }\n  }\n  \n</style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}