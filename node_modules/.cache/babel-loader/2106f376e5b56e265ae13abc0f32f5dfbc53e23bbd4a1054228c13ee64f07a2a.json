{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-e928b7d8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"user-profile\"\n};\nconst _hoisted_2 = {\n  class: \"user-profile__sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"user-profile__user-panel\"\n};\nconst _hoisted_4 = {\n  class: \"user-profile__username\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"user-profile__admin-badge\"\n};\nconst _hoisted_6 = {\n  class: \"user-profile__follower-count\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"strong\", null, \"Followers: \", -1 /* HOISTED */));\nconst _hoisted_8 = {\n  class: \"user-profile__twoots-wrapper\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CreateTwootPanel = _resolveComponent(\"CreateTwootPanel\");\n  const _component_TwootItem = _resolveComponent(\"TwootItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h1\", _hoisted_4, \"@\" + _toDisplayString($setup.state.user.username), 1 /* TEXT */), _createCommentVNode(\" TEMPLATE CONDITIONALS \"), _createCommentVNode(\" <h2> {{ userId }} </h2> \"), $setup.state.user.isAdmin ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, \" Admin \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <div class=\\\"user-profile__admin-badge\\\" v-else> // no need attribute\\n              Not Admin\\n          </div>\\n          // can also do v-else-if=\\\"condition\\\"\\n          \"), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createTextVNode(\" \" + _toDisplayString($setup.state.followers), 1 /* TEXT */)])]), _createVNode(_component_CreateTwootPanel, {\n    onAddTwoot: $setup.addTwoot\n  }, null, 8 /* PROPS */, [\"onAddTwoot\"])]), _createCommentVNode(\" will not refresh when submit form/twoot \"), _createCommentVNode(\" <form class=\\\"user-profile__create-twoot\\\" @submit.prevent=\\\"createNewTwoot\\\" :class=\\\"{ '--exceeded': newTwootCharacterCount > 180 }\\\"> submit event - create new twoot, :class means it's gonna be dynamic, not just an ordinary string or wtv, the : gives dynamic, use the class when the condition has been met! css - turn red if > 180 \"), _createCommentVNode(\" give input fields label! \"), _createCommentVNode(\" <label for=\\\"newTwoot\\\"><strong>New Twoot</strong> ( {{ newTwootCharacterCount}}/180)</label> to display how many char out of 180, inside the {{}} only object/attr \"), _createCommentVNode(\" <textarea id=\\\"newTwoot\\\" rows=\\\"4\\\" v-model=\\\"newTwootContent\\\"/> \"), _createCommentVNode(\" v-model is to sync up the input and tag, so value of field is synced up to this v-model textarea \\\"tag\\\"\"), _createCommentVNode(\" create 2 types: a draft and a real instant tweet \"), _createCommentVNode(\" <div class=\\\"user-profile__create-twoot-type\\\">\\n            <label for=\\\"newTwootType\\\"><strong>Type: </strong></label>\\n            <select id=\\\"newTwootType\\\" v-model=\\\"selectedTwootType\\\"> selecting from a few options \"), _createCommentVNode(\" <option :value=\\\"option.value\\\" v-for=\\\"(option, index) in twootTypes\\\" :key=\\\"index\\\"> each object has a value field (dynamic), sets value as selectedTwootType when u choose type \"), _createCommentVNode(\" {{ option.name }} \"), _createCommentVNode(\" </option> \"), _createCommentVNode(\" referencing code or piece of text, not a literals \"), _createCommentVNode(\" </select>\\n          </div>\\n          \\n          <button> \"), _createCommentVNode(\" Twoot! in html, it'd refresh when u submit - we don't want that, so use event @submit.prevent instead of refreshing\\n          </button>\\n        </form>\\n      </div> \"), _createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" {{ user.twoots[0] }}\\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 \"), _createCommentVNode(\" it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render \"), _createCommentVNode(\" so we want to create a twoot component for better org \"), _createCommentVNode(\" <div class=\\\"user-profile__twoot\\\" v-for=\\\"twoot in user.twoots\\\" :key=\\\"twoot.id\\\">\\n            {{ twoot.content }}\\n          </div> \"), _createCommentVNode(\" if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.state.user.twoots, twoot => {\n    return _openBlock(), _createBlock(_component_TwootItem, {\n      key: twoot.id,\n      username: $setup.state.user.username,\n      twoot: twoot\n    }, null, 8 /* PROPS */, [\"username\", \"twoot\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" favourite is an event we emit to the parent \"), _createCommentVNode(\" passing in props and actual twoot object pulled from the for loop \")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_toDisplayString","$setup","state","user","username","_createCommentVNode","isAdmin","_hoisted_5","_hoisted_6","_hoisted_7","followers","_createVNode","_component_CreateTwootPanel","onAddTwoot","addTwoot","_hoisted_8","_Fragment","_renderList","twoots","twoot","_createBlock","_component_TwootItem","key","id"],"sources":["/Users/aishasabrina/Desktop/Projects/twotter/twotter/twotter/src/views/UserProfile.vue"],"sourcesContent":["<!-- <template>\n  <div id=\"app\">\n    @{{ user.username }} - {{ fullName }} // Don't need to call data(), readily accessible, the {{}} is to show that it's dynamic\n    <strong>Followers: </strong> {{ followers }}\n    <button @click=\"followUser\">\n      Followers\n    </button>\n  </div>\n</template>\n-->\n\n<template>\n    <div class=\"user-profile\">\n      <div class=\"user-profile__sidebar\">\n        <div class=\"user-profile__user-panel\">\n          <h1 class=\"user-profile__username\">@{{ state.user.username }}</h1>\n          <!-- TEMPLATE CONDITIONALS -->\n          <!-- <h2> {{ userId }} </h2> -->\n          <div class=\"user-profile__admin-badge\" v-if=\"state.user.isAdmin\">\n              Admin\n          </div>\n          <!-- <div class=\"user-profile__admin-badge\" v-else> // no need attribute\n              Not Admin\n          </div>\n          // can also do v-else-if=\"condition\"\n          -->\n          <div class=\"user-profile__follower-count\">\n            <strong>Followers: </strong> {{ state.followers }}\n          </div>\n        </div>\n        <CreateTwootPanel @add-twoot=\"addTwoot\"/>\n      </div>\n        <!-- will not refresh when submit form/twoot -->\n        <!-- <form class=\"user-profile__create-twoot\" @submit.prevent=\"createNewTwoot\" :class=\"{ '--exceeded': newTwootCharacterCount > 180 }\"> submit event - create new twoot, :class means it's gonna be dynamic, not just an ordinary string or wtv, the : gives dynamic, use the class when the condition has been met! css - turn red if > 180 -->\n          <!-- give input fields label! -->\n          <!-- <label for=\"newTwoot\"><strong>New Twoot</strong> ( {{ newTwootCharacterCount}}/180)</label> to display how many char out of 180, inside the {{}} only object/attr -->\n          <!-- <textarea id=\"newTwoot\" rows=\"4\" v-model=\"newTwootContent\"/> -->\n          <!-- v-model is to sync up the input and tag, so value of field is synced up to this v-model textarea \"tag\"-->\n          <!-- create 2 types: a draft and a real instant tweet -->\n          <!-- <div class=\"user-profile__create-twoot-type\">\n            <label for=\"newTwootType\"><strong>Type: </strong></label>\n            <select id=\"newTwootType\" v-model=\"selectedTwootType\"> selecting from a few options -->\n              <!-- <option :value=\"option.value\" v-for=\"(option, index) in twootTypes\" :key=\"index\"> each object has a value field (dynamic), sets value as selectedTwootType when u choose type -->\n                <!-- {{ option.name }} -->\n              <!-- </option> -->\n              <!-- referencing code or piece of text, not a literals -->\n            <!-- </select>\n          </div>\n          \n          <button> -->\n            <!-- Twoot! in html, it'd refresh when u submit - we don't want that, so use event @submit.prevent instead of refreshing\n          </button>\n        </form>\n      </div> -->\n      <div class=\"user-profile__twoots-wrapper\">\n          <!-- {{ user.twoots[0] }}\n          {{ user.twoots[1] }} - you can index it but not good to take out 1 by 1 --> \n          <!-- it's gonna render even the div class itself, so each user.twoots element is stored in the variable twoot, it also needs a key/id for the object or do (twoot, index) instead of just twoot which is unique, loop through the list and render -->\n          <!-- so we want to create a twoot component for better org -->\n          <!-- <div class=\"user-profile__twoot\" v-for=\"twoot in user.twoots\" :key=\"twoot.id\">\n            {{ twoot.content }}\n          </div> -->\n          <!-- if something happens on screen - is event - e.g. when you click on a link - can trigger an event like click -->\n          <TwootItem \n            v-for=\"twoot in state.user.twoots\" \n            :key=\"twoot.id\" \n            :username=\"state.user.username\" \n            :twoot=\"twoot\"\n          />\n          <!-- favourite is an event we emit to the parent -->\n          <!-- passing in props and actual twoot object pulled from the for loop -->\n        </div>\n    </div>\n</template>\n  \n<script>\nimport { reactive, computed } from 'vue';\nimport { useRoute } from 'vue-router'; // gives us a route object we can reference\nimport { users } from \"../assets/users\";\nimport TwootItem from \"@/components/TwootItem\";\nimport CreateTwootPanel from \"@/components/CreateTwootPanel\";\n\n  export default {\n    // order doesn't matter in here\n    // name: 'App', // this is like key value pairs/\n    name: \"UserProfile\",\n    components: { CreateTwootPanel, TwootItem },\n    setup() {\n      const route = useRoute();\n      // computed property - changes depending on what url we're on\n      const userId = computed(() => route.params.userId) // use route object param to get userId\n      // in rls, check if userId exists, then fetch from API\n      // If (userId) fetchUserFromApi(userId)\n      const state = reactive({\n        followers: 0, // default state\n        user: users[userId.value - 1] || users[0] // need to use .value for computed() properties\n        // user: { // user object\n        //   id: 1,\n        //   username: 'Shasbrna_19',\n        //   firstName: 'Aisha',\n        //   lastName: 'Sabrina',\n        //   email: 'aisharoslan@nyu.edu',\n        //   isAdmin: true,\n        //   twoots: [\n        //     { id: 1, content: 'Twotter is Amazing!' },\n        //     { id: 2, content: \"Don't forget to subscribe!\" }\n        //   ]\n        // }\n      })\n\n      function addTwoot(twoot) {\n        state.user.twoots.unshift( { id: state.user.twoots.length + 1, content: twoot });\n      }\n\n      return { // return to template to use\n        state,\n        addTwoot,\n        userId\n      }\n    }\n    // data() {\n    //   return {\n    //     // newTwootContent: '',\n    //     // selectedTwootType: 'instant', // default type\n    //     // twootTypes: [ // an array of 2 objects\n    //     //   { value: 'draft', name: 'Draft' },\n    //     //   { value: 'instant', name: 'Instant Twoot' }\n    //     // ],\n    //     // isLoading: false, // interacting w this to know if loading/not\n    //     // all this info below is usually given by API\n    //     followers: 0, // default state\n    //     user: { // user object\n    //       id: 1,\n    //       username: 'Shasbrna_19',\n    //       firstName: 'Aisha',\n    //       lastName: 'Sabrina',\n    //       email: 'aisharoslan@nyu.edu',\n    //       isAdmin: true,\n    //       twoots: [\n    //         { id: 1, content: 'Twotter is Amazing!' },\n    //         { id: 2, content: \"Don't forget to subscribe!\" }\n    //       ]\n    //     }\n    //   }\n    // },\n    // watch: {\n    //   // watches a data point - if it changes, runs a function, esp when u have data that changes REACTIVELY based off of other things\n    //   followers(newFollowerCount, oldFollowerCount) {\n    //     if (oldFollowerCount < newFollowerCount) { // only if gain follower\n    //       console.log(`${this.user.username} has gained a follower!`)\n    //       // same user component but putting diff data into it\n    //     }\n    //     // if username or id is diff - then we wanna fetch new user data\n    //   }\n    // },\n    // computed property - 1 data point generated/built reactively from other factors \n    // computed: { \n    //   fullName() {\n    //     return `${this.user.firstName} ${this.user.lastName}` // calls the user object in data() - this is a string literal\n    //     // another option: this.user.firstName + this.user.lastName\n    //   },\n    //   // dyanmically update when char count is changed // DYNAMIC STYLING for css - changes style based on whether data is diff or not\n    //   newTwootCharacterCount() {\n    //     return this.newTwootContent.length; // how many characters in that string or if a list, how many things/objects in that list\n    //   }\n\n    // },\n    // methods: { // doesn't run by itself, need to call\n    //   addTwoot(twoot) {\n    //     this.user.twoots.unshift( { id: this.user.twoots.length + 1, content: twoot });\n    //   }\n    // }\n      // followUser() {\n      //   this.followers++; // adds followers count by 1\n      // },\n      // toggleFavourite(id) {\n      //   console.log(`Favourited Tweet #${id}`)\n      // },\n    //   createNewTwoot() {\n    //     if (this.newTwootContent && this.selectedTwootType !== 'draft') { \n    //     // check if content is not '' and twoot type is not draft, !== for js, then create new user and add to the FRONT - unshift() in js\n    //       this.user.twoots.unshift( {\n    //       id: this.user.twoots.length + 1,\n    //       content: this.newTwootContent\n    //       })\n    //     }\n    //     this.newTwootContent = ''; // to empty the box after twooting\n    //   }\n    // },\n    // LIFECYCLE HOOK - function built into vue interface that runs during diff stages of component's life cycle (e.g. created/mounted/destroyed)\n    // basically mounted just runs when the first component is rendered\n    // },\n    // mounted() {// runs whatever component is loaded for the first time\n    //   this.followUser(); // basically calls the followUser() method IMMEDIATELY\n    //   // so in a split second, it will add the 1 to the default 0 \n    //   // can also do cool stuff like getting user object from API, make API call\n    // }\n  };\n</script>\n  \n<!-- scoped keyword makes sure that every class in <style> only pertains to this component, NOT for the root App components, use scss with a library/webpack to compile this scss into normal css, why is scss better? for NESTED classes - good for hierarchy and more specific, e.g. h1 for everyone got, but u want a specific one for a component, install webpack using vue ui, lang=\"scss\" alrdy imports it, so now it puts parent class in style declaration when inspect-->\n<style lang=\"scss\" scoped>\n  // so now, we nest all in this user-profile\n  .user-profile {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    // width: 100%;\n    grid-gap: 50px;\n    padding: 50px 5%;\n\n    // child of user-profile\n    .user-profile__user-panel {\n      display: flex;\n      flex-direction: column;\n      // margin-right: 50px;\n      padding: 20px;\n      background-color: white;\n      border-radius: 5px;\n      border: 1px solid #DFE3E8;\n      margin-bottom: auto;\n\n      h1 {\n      margin: 0;\n      }\n  \n      // child of user-panel\n      .user-profile__admin-badge {\n        background: rebeccapurple;\n        color: white;\n        border-radius: 5px;\n        margin-right: auto;\n        padding: 0 10px;\n        font-weight: bold;\n      }\n    }\n      // .user-profile__create-twoot {\n      //   padding-top: 20px;\n      //   display: flex;\n      //   flex-direction: column;\n\n      //   &.--exceeded { // use &. for a class\n      //     color: red;\n      //     border-color: red;\n\n      //     button {\n      //       background-color: red;\n      //       border: none;\n      //       color: white;\n      //     }\n      //   }\n      // }\n     \n    .user-profile__twoots-wrapper {\n      display: grid;\n      grid-gap: 10px;\n      margin-bottom: auto;\n    }\n  }\n  \n</style>\n  "],"mappings":";;;EAYSA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAuB;;EAC3BA,KAAK,EAAC;AAA0B;;EAC/BA,KAAK,EAAC;AAAwB;;;EAG7BA,KAAK,EAAC;;;EAQNA,KAAK,EAAC;AAA8B;gEACvCC,mBAAA,CAA4B,gBAApB,aAAW;;EA2BpBD,KAAK,EAAC;AAA8B;;;;uBA1C3CE,mBAAA,CA4DM,OA5DNC,UA4DM,GA3DJF,mBAAA,CAkBM,OAlBNG,UAkBM,GAjBJH,mBAAA,CAeM,OAfNI,UAeM,GAdJJ,mBAAA,CAAkE,MAAlEK,UAAkE,EAA/B,GAAC,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,KAAK,CAACC,IAAI,CAACC,QAAQ,kBAC1DC,mBAAA,2BAA8B,EAC9BA,mBAAA,6BAAgC,EACaJ,MAAA,CAAAC,KAAK,CAACC,IAAI,CAACG,OAAO,I,cAA/DX,mBAAA,CAEM,OAFNY,UAEM,EAF2D,SAEjE,K,mCACAF,mBAAA,mLAIG,EACHX,mBAAA,CAEM,OAFNc,UAEM,GADJC,UAA4B,E,iBAAA,GAAC,GAAAT,gBAAA,CAAGC,MAAA,CAAAC,KAAK,CAACQ,SAAS,iB,KAGnDC,YAAA,CAAyCC,2BAAA;IAAtBC,UAAS,EAAEZ,MAAA,CAAAa;EAAQ,wC,GAEtCT,mBAAA,6CAAgD,EAChDA,mBAAA,mVAAgV,EAC9UA,mBAAA,8BAAiC,EACjCA,mBAAA,yKAA0K,EAC1KA,mBAAA,wEAAqE,EACrEA,mBAAA,6GAA8G,EAC9GA,mBAAA,sDAAyD,EACzDA,mBAAA,mOAEyF,EACrFA,mBAAA,yLAAsL,EACpLA,mBAAA,uBAA0B,EAC5BA,mBAAA,eAAkB,EAClBA,mBAAA,uDAA0D,EAC5DA,mBAAA,iEAGU,EACVA,mBAAA,6KAGI,EACVX,mBAAA,CAiBQ,OAjBRqB,UAiBQ,GAhBJV,mBAAA,6GAC2E,EAC3EA,mBAAA,kPAAqP,EACrPA,mBAAA,2DAA8D,EAC9DA,mBAAA,6IAEU,EACVA,mBAAA,iHAAoH,G,kBACpHV,mBAAA,CAKEqB,SAAA,QAAAC,WAAA,CAJgBhB,MAAA,CAAAC,KAAK,CAACC,IAAI,CAACe,MAAM,EAA1BC,KAAK;yBADdC,YAAA,CAKEC,oBAAA;MAHCC,GAAG,EAAEH,KAAK,CAACI,EAAE;MACbnB,QAAQ,EAAEH,MAAA,CAAAC,KAAK,CAACC,IAAI,CAACC,QAAQ;MAC7Be,KAAK,EAAEA;;kCAEVd,mBAAA,iDAAoD,EACpDA,mBAAA,uEAA0E,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}